/**
 * –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS) - –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–µ—â–∞–µ—Ç –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã
 * –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
 */

// –ì—Ä–∞—Ñ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
const graph = {
    'A': ['B', 'C'],     // A —Å–æ–µ–¥–∏–Ω–µ–Ω —Å B –∏ C
    'B': ['A', 'D', 'E'], // B —Å–æ–µ–¥–∏–Ω–µ–Ω —Å A, D –∏ E
    'C': ['A', 'F'],     // C —Å–æ–µ–¥–∏–Ω–µ–Ω —Å A –∏ F
    'D': ['B'],          // D —Å–æ–µ–¥–∏–Ω–µ–Ω —Ç–æ–ª—å–∫–æ —Å B
    'E': ['B', 'F'],     // E —Å–æ–µ–¥–∏–Ω–µ–Ω —Å B –∏ F
    'F': ['C', 'E']      // F —Å–æ–µ–¥–∏–Ω–µ–Ω —Å C –∏ E
};

/**
 * –§—É–Ω–∫—Ü–∏—è BFS –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞
 * @param {Object} graph - –≥—Ä–∞—Ñ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
 * @param {string} start - –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞
 * @returns {Array} - –º–∞—Å—Å–∏–≤ –≤–µ—Ä—à–∏–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏—è
 */
function breadthFirstSearch(graph, start) {
    // –û—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—à–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å
    // BFS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–µ—Ä–µ–¥—å (FIFO - First In First Out)
    const queue = [start];
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω
    // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã –≤ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞—Ñ–∞—Ö
    const visited = new Set([start]);
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø–æ—Ä—è–¥–∫–∞ –æ–±—Ö–æ–¥–∞ –≤–µ—Ä—à–∏–Ω
    const result = [];
    
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º BFS —Å –≤–µ—Ä—à–∏–Ω—ã: ${start}`);
    console.log(`–û—á–µ—Ä–µ–¥—å: [${queue}]`);
    console.log(`–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ: {${Array.from(visited)}}`);
    console.log('---');
    
    // –ü–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å –≤–µ—Ä—à–∏–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    while (queue.length > 0) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—à–∏–Ω—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (FIFO)
        const currentVertex = queue.shift();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—à–∏–Ω—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.push(currentVertex);
        
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Ä—à–∏–Ω—É: ${currentVertex}`);
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: [${result}]`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—à–∏–Ω—ã
        const neighbors = graph[currentVertex];
        console.log(`–°–æ—Å–µ–¥–∏ ${currentVertex}: [${neighbors}]`);
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–æ—Å–µ–¥—è–º
        for (const neighbor of neighbors) {
            // –ï—Å–ª–∏ —Å–æ—Å–µ–¥ –µ—â–µ –Ω–µ –±—ã–ª –ø–æ—Å–µ—â–µ–Ω
            if (!visited.has(neighbor)) {
                console.log(`  –ù–∞—à–ª–∏ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞: ${neighbor}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö
                visited.add(neighbor);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–∞ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                queue.push(neighbor);
                
                console.log(`  –î–æ–±–∞–≤–∏–ª–∏ ${neighbor} –≤ –æ—á–µ—Ä–µ–¥—å –∏ –æ—Ç–º–µ—Ç–∏–ª–∏ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π`);
            } else {
                console.log(`  –°–æ—Å–µ–¥ ${neighbor} —É–∂–µ –ø–æ—Å–µ—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            }
        }
        
        console.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏: [${queue}]`);
        console.log(`–¢–µ–∫—É—â–∏–µ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ: {${Array.from(visited)}}`);
        console.log('---');
    }
    
    console.log('BFS –∑–∞–≤–µ—Ä—à–µ–Ω!');
    return result;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
console.log('=== –ü–†–ò–ú–ï–† BFS ===');
const traversalOrder = breadthFirstSearch(graph, 'A');
console.log('\n–§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
console.log(`–ü–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥–∞ –≤–µ—Ä—à–∏–Ω: [${traversalOrder}]`);

/**
 * BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—à–∏–Ω–∞–º–∏
 * @param {Object} graph - –≥—Ä–∞—Ñ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
 * @param {string} start - –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞
 * @param {string} target - —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞
 * @returns {Array|null} - –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –∏–ª–∏ null, –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function bfsShortestPath(graph, start, target) {
    // –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –∏ —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ä—à–∏–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
    if (start === target) {
        return [start];
    }
    
    // –û—á–µ—Ä–µ–¥—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç–∏ (–º–∞—Å—Å–∏–≤—ã –≤–µ—Ä—à–∏–Ω)
    const queue = [[start]];
    const visited = new Set([start]);
    
    console.log(`\n=== –ü–û–ò–°–ö –ö–†–ê–¢–ß–ê–ô–®–ï–ì–û –ü–£–¢–ò –û–¢ ${start} –î–û ${target} ===`);
    
    while (queue.length > 0) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        const path = queue.shift();
        const currentVertex = path[path.length - 1];
        
        console.log(`–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: [${path}]`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—à–∏–Ω—ã
        const neighbors = graph[currentVertex];
        
        for (const neighbor of neighbors) {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ü–µ–ª–µ–≤—É—é –≤–µ—Ä—à–∏–Ω—É
            if (neighbor === target) {
                const shortestPath = [...path, neighbor];
                console.log(`üéâ –ù–ê–ô–î–ï–ù –ü–£–¢–¨: [${shortestPath}]`);
                return shortestPath;
            }
            
            // –ï—Å–ª–∏ —Å–æ—Å–µ–¥ –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–µ–Ω
            if (!visited.has(neighbor)) {
                visited.add(neighbor);
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è—è —Å–æ—Å–µ–¥–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –ø—É—Ç–∏
                const newPath = [...path, neighbor];
                queue.push(newPath);
                console.log(`  –î–æ–±–∞–≤–∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –ø—É—Ç—å: [${newPath}]`);
            }
        }
    }
    
    console.log(`‚ùå –ü—É—Ç—å –æ—Ç ${start} –¥–æ ${target} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
}

// –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
console.log('\n=== –ü–†–ò–ú–ï–† –ü–û–ò–°–ö–ê –ö–†–ê–¢–ß–ê–ô–®–ï–ì–û –ü–£–¢–ò ===');
const shortestPath = bfsShortestPath(graph, 'A', 'F');
console.log(`–ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å: [${shortestPath}]`);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä: BFS –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
console.log('\n=== –ü–û–î–°–ß–ï–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–í–Ø–ó–ù–û–°–¢–ò ===');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ
 * @param {Object} graph - –≥—Ä–∞—Ñ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
 * @returns {number} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
 */
function countConnectedComponents(graph) {
    const visited = new Set();
    let componentCount = 0;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–µ—Ä—à–∏–Ω–∞–º –≥—Ä–∞—Ñ–∞
    for (const vertex in graph) {
        // –ï—Å–ª–∏ –≤–µ—Ä—à–∏–Ω–∞ –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–µ–Ω–∞, —ç—Ç–æ –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if (!visited.has(vertex)) {
            componentCount++;
            console.log(`–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ #${componentCount}`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º BFS –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            const queue = [vertex];
            visited.add(vertex);
            
            while (queue.length > 0) {
                const currentVertex = queue.shift();
                const neighbors = graph[currentVertex];
                
                for (const neighbor of neighbors) {
                    if (!visited.has(neighbor)) {
                        visited.add(neighbor);
                        queue.push(neighbor);
                    }
                }
            }
            
            console.log(`  –í–µ—Ä—à–∏–Ω—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: {${Array.from(visited).filter(v => !visited.has(v) === false)}}`);
        }
    }
    
    return componentCount;
}

// –ü—Ä–∏–º–µ—Ä —Å –Ω–µ—Å–≤—è–∑–Ω—ã–º –≥—Ä–∞—Ñ–æ–º
const disconnectedGraph = {
    'A': ['B'],
    'B': ['A'],
    'C': ['D'],
    'D': ['C'],
    'E': ['F'],
    'F': ['E']
};

console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–Ω–æ—Å—Ç–∏:', countConnectedComponents(disconnectedGraph));